import _typeof from '@babel/runtime/helpers/esm/typeof';
import _regeneratorRuntime from '@babel/runtime/regenerator';
import _asyncToGenerator from '@babel/runtime/helpers/esm/asyncToGenerator';
import _classCallCheck from '@babel/runtime/helpers/esm/classCallCheck';
import _createClass from '@babel/runtime/helpers/esm/createClass';
import _toConsumableArray from '@babel/runtime/helpers/esm/toConsumableArray';
import _inherits from '@babel/runtime/helpers/esm/inherits';
import _createSuper from '@babel/runtime/helpers/esm/createSuper';

var ua = navigator.userAgent.toLocaleLowerCase();
var DeviceJudge = {
  isWx: function isWx() {
    return !!ua.match(/MicroMessenger/i) && !!(ua.match(/MicroMessenger/i)[0] === 'micromessenger');
  },
  isIos: function isIos() {
    var u = navigator.userAgent;

    if (u.indexOf('Android') > -1 || u.indexOf('Linux') > -1) {
      // 安卓手机
      return false;
    } else if (u.indexOf('iPhone') > -1) {
      // 苹果手机
      return true;
    } else if (u.indexOf('iPad') > -1) {
      // iPad
      return false;
    } else if (u.indexOf('Windows Phone') > -1) {
      // winphone手机
      return false;
    } else {
      return false;
    }
  },
  isPC: function isPC() {
    var userAgentInfo = navigator.userAgent;
    var Agents = ['Android', 'iPhone', 'SymbianOS', 'Windows Phone', 'iPad', 'iPod'];
    var flag = true;

    for (var v = 0; v < Agents.length; v++) {
      if (userAgentInfo.indexOf(Agents[v]) > 0) {
        flag = false;
        break;
      }
    }

    return flag;
  },
  isQQ: function isQQ() {
    return /android|webos|iphone|ipod|balckberry/i.test(ua);
  },
  isMob: function isMob() {
    return /android|webos|iphone|ipod|balckberry/i.test(ua);
  }
};
/**
 * 测试url params
 * @param k
 * @param v
 * @param baseUrl
 * @returns
 */

function setUrlParam(k, v) {
  var baseUrl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : location.href;
  var url = new URL(baseUrl);
  var search = new URLSearchParams(url.search);
  search.set(k, v + '');
  url.search = search.toString();
  return url.href;
}
/**
 * 获取 URLparam
 * @param name
 * @param href
 * @returns
 */

function getUrlParam(name) {
  var href = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : location.href;
  var search = href.slice(href.indexOf('?'));
  var matched = search.slice(1).match(new RegExp('(^|&)' + name + '=([^&]*)(&|$)', 'i'));
  if (!matched) return '';
  return search.length ? matched && matched[2] : '';
}
/**
 * dataUrl(base64) 转为 BlobUrl
 * @param {String} dataurl
 * @returns
 */

function dataURLtoBlobUrl(dataurl) {
  // @ts-expect-error
  var arr = dataurl.split(','),
      mime = arr[0].match(/:(.*?);/)[1],
      bstr = atob(arr[1]),
      n = bstr.length,
      u8arr = new Uint8Array(n);

  while (n--) {
    u8arr[n] = bstr.charCodeAt(n);
  }

  return URL.createObjectURL(new Blob([u8arr], {
    type: mime
  }));
}

var cubic = function cubic(value) {
  return Math.pow(value, 3);
};

var easeInOutCubic = function easeInOutCubic(value) {
  return value < 0.5 ? cubic(value * 2) / 2 : 1 - cubic((1 - value) * 2) / 2;
};
/**
 * 滚动到指定位置
 * @param num
 * @param t
 * @param dom
 * @param attr
 */


function scrollTo() {
  var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;
  var dom = arguments.length > 2 ? arguments[2] : undefined;
  var attr = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'scrollTop';
  var el = dom || document.documentElement;
  var beginTime = Date.now();
  var beginValue = el[attr];

  var rAF = window.requestAnimationFrame || function (func) {
    return setTimeout(func, 16);
  };

  var frameFunc = function frameFunc() {
    var progress = (Date.now() - beginTime) / t;

    if (progress < 1) {
      el[attr] = beginValue - (beginValue - num) * easeInOutCubic(progress);
      rAF(frameFunc);
    } else {
      el[attr] = num;
    }
  };

  rAF(frameFunc);
}
/**
 * 简单封装的 XMLHTTPRequest
 * @param url
 * @param method
 * @param params
 * @param headers
 * @returns
 */

function simpleXhr(url, method, params, headers) {
  return new Promise(function (resolve, reject) {
    var xhr;

    if (window['XMLHttpRequest']) {
      xhr = new XMLHttpRequest();
    } else if (window['ActiveXObject']) {
      xhr = new window['ActiveXObject']('');
    } else {
      alert('no xmlhttprequest');
      return;
    }

    if (xhr) {
      var openUrl = url;
      xhr.timeout = 10000;
      xhr.open(method, openUrl, true);

      if (headers) {
        for (var name in headers) {
          xhr.setRequestHeader(name, headers[name]);
        }
      }

      xhr.onreadystatechange = function () {
        if (xhr.readyState === 4 && xhr.status === 200) {
          resolve(xhr.response);
        }
      };

      xhr.onloadend = function () {
        if (xhr.status !== 200) {
          reject('net error');
        }
      };

      xhr.ontimeout = function () {
        reject('time out');
      };

      xhr.send(params);
    }
  });
}
/**
 *
 * @param name
 * @returns
 */

function getCookie(name) {
  if (document.cookie.length > 0) {
    var start = document.cookie.indexOf("".concat(name, "="));

    if (start !== -1) {
      start = start + name.length + 1;
      var end = document.cookie.indexOf(';', start);

      if (end === -1) {
        end = document.cookie.length;
      }

      return decodeURI(document.cookie.substring(start, end));
    }
  }

  return '';
}
/**
 * 设置cookie值
 *
 * @param {String} name cookie名称
 * @param {String} value cookie值
 * @param {Number} expiredays 过期时间，天数
 */

function setCookie(name, value, expiredays) {
  var exdate = new Date();
  exdate.setDate(exdate.getDate() + expiredays);
  document.cookie = "".concat(name, "=").concat(encodeURI(value)); // @ts-ignore

  document.cookie += expiredays ? ";expires=".concat(exdate.toGMTString()) : "";
}
/**
 * 删除指定cookie值
 * @param {String} name cookie名称
 */

function clearCookie(name) {
  setCookie(name, '', -1);
}
/**
 * 简单的使用 requestAnimationFrame 方法做定时器
 * @param fn
 * @param delay
 * @returns
 */

function setTimeoutFunc(fn) {
  var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;
  var lt = 0;
  var requestId;
  var remainTime = 0;
  var final = {
    start: function start() {
      var now = Date.now();
      requestId = requestAnimationFrame(this.start.bind(this));

      if (now - lt < 100) {
        remainTime += now - lt;

        if (remainTime >= delay) {
          fn();
          cancelAnimationFrame(requestId);
          return;
        }
      }

      lt = now;
    },
    stop: function stop() {
      cancelAnimationFrame(requestId);
    }
  };
  final.start();
  return final;
}
/**
 * 简单的使用 requestAnimationFrame 方法做定时器
 * @param {*} fn
 * @param {*} delay 100
 */

function setIntervalFunc(fn) {
  var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;
  var lt = 0; // lastTime

  var requestId;
  var _events = []; // 每秒需要执行的 方法arr

  typeof fn == 'function' && _events.push(fn); // 每秒都会执行

  var cfg = {
    start: function start() {
      var now = Date.now();
      requestId = requestAnimationFrame(this.start.bind(this));

      if (now - lt >= delay) {
        lt = now;

        _events.map(function (f) {
          return f();
        });
      }
    },

    /**
     *
     * @param {*} fn
     */
    notify: function notify(fn) {
      typeof fn == 'function' && _events.push(fn);
    },
    off: function off(fn) {
      var i = _events.length;

      while (i--) {
        var cb = _events[i];

        if (cb === fn) {
          _events.splice(i, 1);

          break;
        }
      }
    },
    getRequestId: function getRequestId() {
      return requestId;
    },
    stop: function stop() {
      cancelAnimationFrame(requestId);
    }
  };
  cfg.start();
  return cfg;
}
/**
 * 时间格式化
 * @param {*} fmt
 * @param {*} date
 * @returns
 */

function dateFormat(fmt, date) {
  var ret; // ios 的时间 格式 需要转成 /

  if (typeof date === 'string') {
    date = date.replace(/-/g, '/');
  }

  date = new Date(date);
  var opt = {
    "Y+": date.getFullYear().toString(),
    "M+": (date.getMonth() + 1).toString(),
    "d+": date.getDate().toString(),
    "h+": date.getHours().toString(),
    "m+": date.getMinutes().toString(),
    "s+": date.getSeconds().toString() // 秒
    // 有其他格式化字符需求可以继续添加，必须转化成字符串

  };

  for (var k in opt) {
    ret = new RegExp("(" + k + ")").exec(fmt);

    if (ret) {
      // @ts-expect-error
      fmt = fmt.replace(ret[1], ret[1].length == 1 ? opt[k] : opt[k].padStart(ret[1].length, "0"));
    }
  }
  return fmt;
}

/**
 * 移动端的键盘回收上移处理
 */
function inputIosAdapte() {
  var ua = window.navigator.userAgent.toLowerCase();

  if (/iphone|ipod|ipad/i.test(navigator.appVersion) && /MicroMessenger/i.test(ua)) {
    document.body.addEventListener('focusout', function () {
      console.log('focusout');
      window.scrollTo({
        top: 0,
        left: 0,
        behavior: 'smooth'
      });
    });
  }
}
/**
* 添加样式表 addCSSRule(document.styleSheets[0], ".header", "float: left");
* @param {*} sheet
* @param {*} selector
* @param {*} rules
* @param {*} index
*/

function addCSSRule(sheet, selector, rules, index) {
  if ("insertRule" in sheet) {
    sheet.insertRule(selector + "{" + rules + "}", index);
  } else if ("addRule" in sheet) {
    sheet.addRule(selector, rules, index);
  }
}
var whitespaceRE = /\s+/;
/**
 * 添加 Dom class
 * @param {Element} el
 * @param {String} cls
 * @returns
 */

function addClass(el, cls) {
  if (!el) {
    console.warn("can't add class ".concat(cls, " to ").concat(el));
    return;
  }

  if (!cls || !(cls = cls.trim())) {
    return;
  }
  /* istanbul ignore else */


  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) {
        return el.classList.add(c);
      });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";

    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}
/**
 * 移除Dom class
 * @param {Element} el
 * @param {String} cls
 * @returns
 */

function removeClass(el, cls) {
  if (!el) {
    console.warn("can't remove class ".concat(cls, " from ").concat(el));
    return;
  }

  if (!cls || !(cls = cls.trim())) {
    return;
  }

  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) {
        return el.classList.remove(c);
      });
    } else {
      el.classList.remove(cls);
    }

    if (!el.classList.length) {
      el.removeAttribute('class');
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';

    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }

    cur = cur.trim();

    if (cur) {
      el.setAttribute('class', cur);
    } else {
      el.removeAttribute('class');
    }
  }
}
/**
 * 设置 Dom 内联样式
 * @param {Element} el
 * @param {Object} styles
 * @returns
 */

function setStyles(el, styles) {
  if (!el) {
    console.warn("can't set styles from ".concat(el));
    return;
  }

  if (!styles) return;

  for (var k in styles) {
    if (styles[k]) {
      el.style[k] = styles[k];
    }
  }
}
/**
 * 添加事件
 * @param {Element} element
 * @param {String} type
 * @param {Function} callback
 */

function addHandler(element, type, callback) {
  if (!element) {
    console.warn("can't addHandler ".concat(type, " from undefined"));
    return;
  }

  if (element.addEventListener) {
    if (type.slice(0, 2) === 'on') type = type.slice(2); // @ts-expect-error

    element.addEventListener(type, callback, false);
  } else {
    if (type.slice(0, 2) !== 'on') type = 'on' + type; // @ts-expect-error

    element.attachEvent(type, callback);
  }
}
/**
 * remove 事件
 * @param {Element} element
 * @param {String} type
 * @param {Function} callback
 */

function removeHandler(element, type, callback) {
  if (!element) {
    console.warn("can't removeHandler ".concat(type, " from ").concat(element));
    return;
  }

  if (element.addEventListener) {
    if (type.slice(0, 2) === 'on') type = type.slice(2);
    element.removeEventListener(type, callback, false);
  } else {
    if (type.slice(0, 2) !== 'on') type = 'on' + type;
    element.datachEvent(type, callback);
  }
}
/**
 * H5 页面的 防止滚动
 */

var H5ScrollCtrl = function () {
  var isLockScroll = false; // 是否已经锁定了

  var scrollCont = document.getElementsByTagName("html")[0];
  var currScrollTop = 0;
  return {
    disabled: function disabled() {
      if (isLockScroll) return;
      isLockScroll = true; // const html = document.getElementsByTagName("html")[0];
      // // 判断是不是 html在 滚动
      // if (html.scrollTop) {
      //   scrollCont = html;
      // }

      var scrollTop = scrollCont.scrollTop;
      currScrollTop = scrollTop;
      scrollCont.style.overflow = "hidden";
      scrollCont.style.touchAction = "none";
      scrollCont.style.top = "-".concat(scrollTop, "px");
      scrollCont.style.position = "fixed";
      setStyles(scrollCont, {
        left: '0',
        right: '0'
      });
    },
    enabled: function enabled() {
      if (!isLockScroll) return;
      isLockScroll = false;
      scrollCont.style.overflow = "";
      scrollCont.style.touchAction = "auto";
      scrollCont.style.position = "static";
      scrollCont.scrollTop = currScrollTop;
      scrollCont.style.top = "auto";
      setStyles(scrollCont, {
        left: 'auto',
        right: 'auto'
      });
    }
  };
}();

/**
 * 函数防抖，如下拉菜单
 * @param {Function} fn
 * @param {Number} delay
 * @returns
 */
function debounce(fn) {
  var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2000;
  var timer = null;

  function invokeFunc() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    // @ts-expect-error
    var context = this;
    if (timer) clearTimeout(timer);
    timer = setTimeout(function () {
      fn.apply(context, args);
    }, delay);
  }

  function cancel() {
    if (timer !== undefined) {
      clearTimeout(timer);
    }
  }

  invokeFunc.cancel = cancel;
  return invokeFunc;
}
/**
 * 函数防抖的 装饰器版本
 * @param time
 * @returns
 */

function debounceDecorator() {
  var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1000;
  return function (target, property, descriptor) {
    var func = descriptor.value;

    if (typeof func !== 'function') {
      throw new Error('debounceDecorator error: are u kidding me ?');
    }

    var timerId;

    function invokeFunc() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      // @ts-expect-error
      var context = this;
      if (timerId) clearTimeout(timerId);
      timerId = setTimeout(function () {
        func.apply(context, args);
      }, time);
    }

    function cancel() {
      if (timerId !== undefined) {
        clearTimeout(timerId);
      }
    }

    invokeFunc.cancel = cancel;
    descriptor.value = invokeFunc;
  };
}
/**
* 函数节流， 用作防连点
* @param {Function} fn
* @param {Number} delay
* @returns
*/

function throttle(fn) {
  var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2000;
  var flag = true,
      timerId;
  return function () {
    if (!flag) return;
    flag = false;
    timerId && clearTimeout(timerId);
    timerId = setTimeout(function () {
      flag = true;
    }, delay); // @ts-expect-error

    var context = this;

    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    return fn.apply(context, args);
  };
}
/**
 * 函数节流的 装饰器版本
 * @param time
 * @returns
 */

function throttleDecorator() {
  var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1000;
  return function (target, property, descriptor) {
    var func = descriptor.value;

    if (typeof func !== 'function') {
      throw new Error('debounceDecorator error: are u kidding me ?');
    }

    var flag = true,
        timerId;

    function invokeFunc() {
      if (!flag) return;
      flag = false;
      timerId && clearTimeout(timerId);
      timerId = setTimeout(function () {
        flag = true;
      }, time); // @ts-expect-error

      var context = this;

      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      return func.apply(context, args);
    }

    descriptor.value = invokeFunc;
  };
}
/**
 * Promise 确保执行 依赖于外部 标记值
 * @param propertyName 变量名
 * @param propertyValue 前后执行状态
 * @param allowedValue 允许执行的状态值 数组
 * @returns
 */

function PromiseAwaitByPropertyValue(propertyName, propertyValue, allowedValue) {
  return function (target, property, descriptor) {
    var func = descriptor.value;
    descriptor.value = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var currPropertyValue,
          beforePropertyValue,
          afterPropertyValue,
          _len5,
          args,
          _key5,
          _args = arguments;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              // @ts-expect-error
              currPropertyValue = this[propertyName];
              beforePropertyValue = propertyValue[0];
              afterPropertyValue = propertyValue[1];

              if (!(allowedValue && !allowedValue.includes(currPropertyValue))) {
                _context.next = 6;
                break;
              }

              console.error('something for everything is bad:', currPropertyValue);
              return _context.abrupt("return");

            case 6:
              if (!(currPropertyValue === beforePropertyValue)) {
                _context.next = 9;
                break;
              }

              console.error("the ".concat(property, " is not promise call back."));
              return _context.abrupt("return");

            case 9:
              // @ts-expect-error
              this[propertyName] = beforePropertyValue;

              for (_len5 = _args.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
                args[_key5] = _args[_key5];
              }

              _context.next = 13;
              return func.apply(this, args);

            case 13:
              // @ts-expect-error
              this[propertyName] = afterPropertyValue;

            case 14:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));
  };
}
/**
 * 只会执行一次
 * @param fn
 * @returns
 */

function onceFunc(fn) {
  var isDone = false;
  return function () {
    if (isDone) return;
    isDone = true; // @ts-expect-error

    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
      args[_key6] = arguments[_key6];
    }

    return typeof fn === 'function' && fn.apply(this, args);
  };
}
/**
 * 当方法的一些 前置判断和后置处理给剥离出来
 * @param preCondition 前置条件
 * @param postProcess 后置处理 入参就是实际调用的入参
 * @returns
 */

function applyPreOrPost(preCondition, postProcess) {
  return function (target, property, descriptor) {
    var func = descriptor.value;

    if (typeof func !== 'function') {
      throw new Error('debounceDecorator error: are u kidding me ?');
    }

    descriptor.value = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
      var _len7,
          args,
          _key7,
          res,
          _args2 = arguments;

      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!(preCondition === undefined || typeof preCondition === 'function' && preCondition.apply(this) || typeof preCondition === 'string' && this[preCondition])) {
                _context2.next = 7;
                break;
              }

              for (_len7 = _args2.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
                args[_key7] = _args2[_key7];
              }

              _context2.next = 4;
              return func.apply(this, args);

            case 4:
              res = _context2.sent;
              postProcess === null || postProcess === void 0 ? void 0 : postProcess.apply(this, args);
              return _context2.abrupt("return", res);

            case 7:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));
  };
}
/**
 * 只有装饰方法 执行完了之后 才可以第二次执行
 * @param target
 * @param property
 * @param descriptor
 */

function PromiseAwait(target, property, descriptor) {
  var func = descriptor.value;
  var isPromiseFulfilled = true;
  descriptor.value = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
    var _len8,
        args,
        _key8,
        response,
        _args3 = arguments;

    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (isPromiseFulfilled) {
              _context3.next = 2;
              break;
            }

            return _context3.abrupt("return");

          case 2:
            isPromiseFulfilled = false;

            for (_len8 = _args3.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
              args[_key8] = _args3[_key8];
            }

            _context3.next = 6;
            return func.apply(this, args);

          case 6:
            response = _context3.sent;
            isPromiseFulfilled = true;
            return _context3.abrupt("return", response);

          case 9:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));
}
/**
 * PromiseAwait 闭包版本
 * @param func
 * @returns
 */

function promiseAwaitFunc(func) {
  var isPromiseFulfilled = true;
  return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
    var _len9,
        args,
        _key9,
        res,
        _args4 = arguments;

    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (isPromiseFulfilled) {
              _context4.next = 2;
              break;
            }

            return _context4.abrupt("return");

          case 2:
            isPromiseFulfilled = false; // @ts-expect-error

            for (_len9 = _args4.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
              args[_key9] = _args4[_key9];
            }

            _context4.next = 6;
            return func.apply(this, args);

          case 6:
            res = _context4.sent;
            isPromiseFulfilled = true;
            return _context4.abrupt("return", res);

          case 9:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));
}
/**
 * 简易的classnames
 * @returns
 */

function classnames() {
  var classList = [];

  for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
    args[_key10] = arguments[_key10];
  }

  args.forEach(function (item) {
    if (_typeof(item) === 'object') {
      for (var k in item) {
        var kv = item[k];

        if (kv) {
          classList.push(k);
        }
      }
    } else if (typeof item === 'string') {
      classList.push(item);
    }
  });
  return classList.join(' ');
}
/**
 * 获取 n-m之间的 随机数
 * @param {Number} m
 * @param {Number} n
 * @returns
 */

function randomNum(m, n) {
  var max = n;
  var min = m;
  return Math.floor(Math.random() * (max - min + 1)) + min;
}
function typeofFunc(t) {
  return Object.prototype.toString.call(t).slice(8, -1).toLowerCase();
}

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z = "/* // 往上划的动效 */\n.slide-top-leave-active,\n.slide-top-enter-active {\n  transition: all 0.4s cubic-bezier(0.25, 0.1, 0.43, 1.27);\n}\n.slide-top-enter,\n.slide-top-leave-to {\n  transform: translateY(70%);\n  opacity: 0;\n}\n/* // scale-in */\n.scale-in-leave-active,\n.scale-in-enter-active {\n  transition: all 0.8s cubic-bezier(0.25, 0.1, 0.13, 1.43);\n  transform-origin: top center;\n}\n.scale-in-enter,\n.scale-in-leave-to {\n  transform: scale(0.6);\n  opacity: 0;\n}\n/* // scale-in-center */\n.scale-in-center-leave-active,\n.scale-in-center-enter-active {\n  transition: all 0.6s cubic-bezier(0.25, 0.1, 0, 1.87);\n  transform-origin: center;\n}\n.scale-in-center-enter,\n.scale-in-center-leave-to {\n  transform: scale(0.6);\n  opacity: 0;\n}\n/* // fade-in-linear */\n.fade-in-linear-leave-active,\n.fade-in-linear-enter-active {\n  transition: opacity 0.3s linear;\n}\n.fade-in-linear-enter,\n.fade-in-linear-leave-to {\n  opacity: 0;\n}\n";
styleInject(css_248z);

var AniFactoryConfig = function () {
  var transitionProp = 'transition'; // transiton 动画

  var animationProp = 'animation'; // animation 动画

  var transitionEndEvent = 'transitionend'; // transitionend 事件 用于动画结束的时候去除动画 class

  var animationEndEvent = 'animationend'; // animationend 事件 用于动画结束的时候去除动画 class
  // 以下是兼容浏览器方法。

  if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {
    transitionEndEvent = 'webkitTransitionEnd';
  }

  if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {
    animationEndEvent = 'webkitAnimationEnd';
  }
  /**
   * 转化成 number 毫秒
   * @param s
   * @returns
   */


  function toMs(s) {
    return Number(s.slice(0, -1).replace(',', '.')) * 1000;
  }
  /**
   * 获取一段动画的 timeout 时间节点
   * @param delays
   * @param durations
   * @returns
   */


  function getTimeout(delays, durations) {
    while (delays.length < durations.length) {
      delays = delays.concat(delays);
    }

    return Math.max.apply(null, durations.map(function (curr, index) {
      return toMs(curr) + toMs(delays[index]);
    }));
  } // 获取当前动画的信息，如delay duration


  function getTransitionInfo(el, expectedType) {
    var styles = window.getComputedStyle(el);
    var type = expectedType; // 默认值

    var timeout = 0;
    var propCount = 0;

    if (expectedType === 'animation') {
      var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');
      var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');
      var animationTimeout = getTimeout(animationDelays, animationDurations);

      if (animationTimeout > 0) {
        timeout = animationTimeout;
        propCount = animationDurations.length;
      }
    } else {
      var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');
      var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');
      var transitionTimeout = getTimeout(transitionDelays, transitionDurations);

      if (transitionTimeout > 0) {
        timeout = transitionTimeout;
        propCount = transitionDurations.length;
      }
    }

    return {
      type: type,
      timeout: timeout,
      propCount: propCount
    };
  } // 以下是重要代码，是在动画结束的时候，执行回调function


  function whenTransitionEnd(el, expectedType, cb) {
    var ref = getTransitionInfo(el, expectedType);
    var timeout = ref.timeout;
    var event = expectedType === transitionProp ? transitionEndEvent : animationEndEvent;
    var runOnce = true;

    var end = function end() {
      el.removeEventListener(event, end);

      if (runOnce) {
        runOnce = false;
        typeof cb === 'function' && cb();
      }
    };

    el.addEventListener(event, end);
    setTimeout(function () {
      end();
    }, timeout + 1);
  }
  /**
   * 获取gai dom 节点上的 animation timeout 这里就取 duration
   * @param {*} dom
   */


  function getClsAniTimeout(cls, aniType) {
    var el = document.createElement('div');
    addClass(el, cls);
    setStyles(el, {
      position: 'absolute',
      width: '0',
      height: '0',
      left: '0',
      bottom: '0'
    });
    document.body.appendChild(el);
    var t = getTransitionInfo(el, aniType).timeout;
    document.body.removeChild(el);
    return t;
  }

  return {
    transitionEndEvent: transitionEndEvent,
    animationEndEvent: animationEndEvent,
    getTransitionInfo: getTransitionInfo,
    whenTransitionEnd: whenTransitionEnd,
    getClsAniTimeout: getClsAniTimeout
  };
}();
/**
 * 结合transition 和 animation 的 动画工厂
 */

var AniFactory = /*#__PURE__*/function () {
  // 是否开始的时候就是 display none

  /**
   *
   * @param target 目标Dom
   * @param scfg show
   * @param ccfg close
   */
  function AniFactory(target) {
    var scfg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var ccfg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, AniFactory);

    this.target = void 0;
    this.isStartDisplayNone = void 0;
    this.showAniCfg = void 0;
    this.closeAniCfg = void 0;
    this.target = target;
    this.showAniCfg = scfg;
    this.closeAniCfg = ccfg;
    this.isStartDisplayNone = getComputedStyle(target).display === 'none';
  } // clearAllAniCls() {
  //   const {target, aniCls} = this
  //   removeClass(target, `${aniCls} ${aniCls}-enter ${aniCls}-leave ${aniCls}-enter ${aniCls}-leave-to ${aniCls}-enter-active ${aniCls}-leave-active`)
  // }


  _createClass(AniFactory, [{
    key: "showAni",
    value: function showAni() {
      var _this = this;

      var cb = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};
      var aniCfg = arguments.length > 1 ? arguments[1] : undefined;
      return new Promise(function (r) {
        var target = _this.target,
            showAniCfg = _this.showAniCfg,
            isStartDisplayNone = _this.isStartDisplayNone;
        var finalConfig = aniCfg || showAniCfg;
        var _finalConfig$aniName = finalConfig.aniName,
            aniCls = _finalConfig$aniName === void 0 ? '' : _finalConfig$aniName,
            _finalConfig$aniType = finalConfig.aniType,
            aniType = _finalConfig$aniType === void 0 ? 'transition' : _finalConfig$aniType;

        if (aniType === 'animation') {
          isStartDisplayNone && (target.style.display = 'block');
          addClass(target, "".concat(aniCls, " ").concat(aniCls, "-enter"));
          AniFactoryConfig.whenTransitionEnd(target, aniType, function () {
            removeClass(target, "".concat(aniCls, " ").concat(aniCls, "-enter"));
            cb && cb();
            r();
          });
        } else {
          var showStartClsName = aniCls + '-enter';
          var showActiveClsName = aniCls + '-enter-active';
          addClass(target, showStartClsName);
          isStartDisplayNone && (target.style.display = 'block');
          setTimeoutFunc(function () {
            addClass(target, showActiveClsName);
            setTimeoutFunc(function () {
              removeClass(target, showStartClsName);
              AniFactoryConfig.whenTransitionEnd(target, aniType, function () {
                removeClass(target, showStartClsName + ' ' + showActiveClsName);
                typeof cb === 'function' && cb();
                r();
              });
            }, 10);
          }, 50);
        }
      });
    }
  }, {
    key: "hideAni",
    value: function hideAni() {
      var _this2 = this;

      var cb = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};
      var aniCfg = arguments.length > 1 ? arguments[1] : undefined;
      return new Promise(function (r) {
        var target = _this2.target,
            closeAniCfg = _this2.closeAniCfg;
        var finalConfig = aniCfg || closeAniCfg;
        var _finalConfig$aniName2 = finalConfig.aniName,
            aniCls = _finalConfig$aniName2 === void 0 ? '' : _finalConfig$aniName2,
            _finalConfig$aniType2 = finalConfig.aniType,
            aniType = _finalConfig$aniType2 === void 0 ? 'transition' : _finalConfig$aniType2;

        if (aniType === 'animation') {
          addClass(target, "".concat(aniCls, "-leave"));
          AniFactoryConfig.whenTransitionEnd(target, aniType, function () {
            removeClass(target, "".concat(aniCls, "-leave"));
            cb && cb();
            r();
          });
        } else {
          var hiddenStartClsName = aniCls + '-leave-to';
          var hiddenActiveClsName = aniCls + '-leave-active';
          addClass(target, hiddenActiveClsName); // hidden 的动画，就相对简单，只需要加上动画就行了，因为没有 display none 的干扰

          addClass(target, hiddenStartClsName);
          AniFactoryConfig.whenTransitionEnd(target, aniType, function () {
            removeClass(target, hiddenStartClsName + ' ' + hiddenActiveClsName);
            typeof cb === 'function' && cb();
            r();
          });
        }
      });
    }
  }]);

  return AniFactory;
}();
var onShowAnimationList = function () {
  /**
   * 初始化时间线
   * @param dom
   * @param st
   * @param cfg
   * @param timeLine
   */
  function initTimeLine(dom, st, cfg, timeLine) {
    var aniCls = cfg.aniCls,
        _cfg$isRemoveAniEnd = cfg.isRemoveAniEnd,
        isRemoveAniEnd = _cfg$isRemoveAniEnd === void 0 ? false : _cfg$isRemoveAniEnd,
        isShowOriginCont = cfg.isShowOriginCont,
        aniType = cfg.aniType;
    var startTiming = st;
    !isShowOriginCont && setStyles(dom, {
      visibility: 'hidden',
      display: 'block'
    }); // 做动画的时候去掉 事件

    dom.onclick = function (e) {
      e.stopPropagation();
    };

    setStyles(dom, {
      pointerEvents: 'none'
    });
    setTimeout(function () {
      if (dom) {
        !isShowOriginCont && setStyles(dom, {
          visibility: 'visible'
        }); // 自动做动画

        var aniIns = new AniFactory(dom, {
          aniName: aniCls,
          aniType: aniType
        });
        aniIns.showAni(function () {
          dom.onclick = null;
          setStyles(dom, {
            pointerEvents: 'auto'
          });
          isRemoveAniEnd && removeClass(dom, aniCls);
        });
      }
    }, startTiming);
    timeLine.push([startTiming, AniFactoryConfig.getClsAniTimeout(aniType == 'animation' ? "".concat(aniCls, " ").concat(aniCls, "-enter") : "".concat(aniCls, "-enter-active"), aniType || 'animation')]);
  }

  return function (aniArr) {
    try {
      if (!Array.isArray(aniArr)) {
        throw new Error("The param must be the Array");
      } // 加默认值


      aniArr.forEach(function (a) {
        return a.aniType = a.aniType || 'animation';
      });
      var timeLine = [];
      var previousItemIndex;
      var currItemIndex = 0;

      while (currItemIndex < aniArr.length) {
        var currItem = aniArr[currItemIndex];
        var currDom = currItem.dom;
        var fromLastTogether = currItem.fromLastTogether,
            aniStartTimingFromLast = currItem.aniStartTimingFromLast,
            aniEndTimingFromLast = currItem.aniEndTimingFromLast;

        if (previousItemIndex === undefined) {
          initTimeLine(currDom, aniStartTimingFromLast || 0, currItem, timeLine);
        } else {
          var st = timeLine[previousItemIndex][0];

          if (aniStartTimingFromLast) {
            st += aniStartTimingFromLast;
          } else if (aniEndTimingFromLast) {
            st += timeLine[previousItemIndex][1] + aniEndTimingFromLast;
          }

          initTimeLine(currDom, st, currItem, timeLine);
        }

        previousItemIndex = currItemIndex;
        ++currItemIndex;
      }
    } catch (e) {
      console.error(e);
    }
  };
}();

function UseEvent(events) {
  return function (Target) {
    return /*#__PURE__*/function (_Target) {
      _inherits(_class2, _Target);

      var _super = _createSuper(_class2);

      // event: EventInfer;
      function _class2() {
        var _this2;

        _classCallCheck(this, _class2);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this2 = _super.call.apply(_super, [this].concat(args)); // this._events = events || Object.create(null)

        _this2._events = events || Object.create(null);
        return _this2;
      }

      _createClass(_class2, [{
        key: "$on",
        value: function $on(type, func, context) {
          var _this3 = this;

          if (Array.isArray(type)) {
            type.map(function (t) {
              _this3.$on(t, func, context);
            });
          } else {
            (this._events[type] || (this._events[type] = [])).push({
              call: func,
              context: context
            });
          }
        }
      }, {
        key: "$once",
        value: function $once(type, func, context) {
          var _arguments = arguments,
              _this4 = this;

          var on = function on() {
            _this4.$off(type, on); // @ts-ignore


            func.apply(context, _arguments);
          };

          this.$on(type, on);
          return this;
        }
      }, {
        key: "$off",
        value: function $off(type, func) {
          var _this5 = this;

          if (!type) {
            // 这里 需要需要修改用 delete
            // this._events = Object.create(null)
            for (var k in this._events) {
              delete this._events[k];
            }

            return this;
          }

          if (Array.isArray(type)) {
            type.map(function (t) {
              _this5.$off(t, func);
            });
            return this;
          }

          var cbs = this._events[type];

          if (!cbs || !cbs.length) {
            return this;
          }

          if (!func) {
            this._events[type] = [];
            return this;
          }

          var i = cbs.length;

          while (i--) {
            var cb = cbs[i];

            if (cb.call === func) {
              cbs.splice(i, 1);
              break;
            }
          }

          return this;
        }
      }, {
        key: "$emit",
        value: function $emit(type, event) {
          var _this6 = this;

          var args = [].slice.call(arguments, 1);

          if (Array.isArray(type)) {
            type.map(function (t) {
              _this6.$emit.apply(_this6, [t].concat(_toConsumableArray(args)));
            });
            return this;
          }

          var cbs = this._events[type];

          if (cbs && cbs.length) {
            cbs.map(function (item) {
              var _this = item.context || _this6;

              item.call.apply(_this, args);
            });
          }
        }
      }]);

      return _class2;
    }(Target);
  };
}

/**
 * 简单的栈
 */
var Stack = /*#__PURE__*/function () {
  function Stack() {
    _classCallCheck(this, Stack);

    this.items = void 0;
    this.items = [];
  }
  /**
   * 入栈
   * @param {*} item
   */


  _createClass(Stack, [{
    key: "push",
    value: function push(item) {
      this.items.push(item);
    }
    /**
     * 出栈
     * @returns item
     */

  }, {
    key: "pop",
    value: function pop() {
      return this.items.pop();
    }
    /**
     * 获取栈顶数据
     * @returns item
     */

  }, {
    key: "top",
    value: function top() {
      return this.items[this.items.length - 1];
    }
    /**
     * 获取栈的大小
     * @returns
     */

  }, {
    key: "size",
    value: function size() {
      return this.items.length;
    }
    /**
     * 判断当前栈是否为空
     * @returns boolean
     */

  }, {
    key: "isEmpty",
    value: function isEmpty() {
      return this.items.length === 0;
    }
  }]);

  return Stack;
}();
/**
 * 队列
 */

var Queue = /*#__PURE__*/function () {
  function Queue() {
    _classCallCheck(this, Queue);

    this.items = void 0;
    // 存储数据
    this.items = [];
  }

  _createClass(Queue, [{
    key: "enqueue",
    value: function enqueue(item) {
      // 入队
      this.items.push(item);
    }
  }, {
    key: "dequeue",
    value: function dequeue() {
      // 出队
      return this.items.shift();
    }
  }, {
    key: "head",
    value: function head() {
      // 获取队首的元素
      return this.items[0];
    }
  }, {
    key: "tail",
    value: function tail() {
      // 获取队尾的元素
      return this.items[this.items.length - 1];
    }
  }, {
    key: "clear",
    value: function clear() {
      // 清空队列
      this.items = [];
    }
  }, {
    key: "size",
    value: function size() {
      // 获取队列的长度
      return this.items.length;
    }
  }, {
    key: "isEmpty",
    value: function isEmpty() {
      // 判断队列是否为空
      return this.items.length === 0;
    }
  }]);

  return Queue;
}();
/**
 * 简单的一个链表节点
 */

var Node = /*#__PURE__*/_createClass(function Node(value) {
  var next = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

  _classCallCheck(this, Node);

  this.value = void 0;
  this.next = void 0;
  this.value = value;
  this.next = next;
});
/**
 * 单向链表
 */

var SingleNodeList = /*#__PURE__*/function () {
  //头节点
  function SingleNodeList(value) {
    _classCallCheck(this, SingleNodeList);

    this.head = void 0;
    this.head = value ? new Node(value) : null;
  }
  /**
   * 查找对应的链表节点, 一般的链表遍历就用 while吧
   * @param value
   */


  _createClass(SingleNodeList, [{
    key: "findNode",
    value: function findNode(value) {
      var currNode = this.head;

      while (currNode && currNode.value !== value) {
        currNode = currNode.next;
      } // currNode Maybe the last for null


      if (!currNode) return null;
      return currNode;
    }
    /**
     * 插入元素到 链表中的哪一个
     * @param value 插入元素
     * @param newValue 被插入元素
     */

  }, {
    key: "insertAfter",
    value: function insertAfter(value, newValue) {
      var currNode = this.findNode(value);

      if (!currNode) {
        throw new Error('no match item for ' + value);
      }

      var targetNode = new Node(newValue);
      targetNode.next = currNode.next;
      currNode.next = targetNode;
    }
    /**
     * 向单向链表插入元素
     * @param value 插入元素
     */

  }, {
    key: "append",
    value: function append(value) {
      var newNode = new Node(value);
      var currNode = this.head;

      if (!currNode) {
        this.head = newNode;
        return;
      }

      while (currNode.next) {
        // 找尾结点
        currNode = currNode.next;
      }

      currNode.next = newNode;
    }
    /**
     * 向单向链表 头元素前插入
     * @param value 插入元素
     */

  }, {
    key: "prepend",
    value: function prepend(value) {
      var newNode = new Node(value);

      if (!this.head) {
        this.head = newNode;
        return;
      }

      newNode.next = this.head;
      this.head = newNode;
    }
    /**
     * 清空
     */

  }, {
    key: "empty",
    value: function empty() {
      this.head = null;
    }
    /**
     * 清除单向链表的 某个节点
     * @param value
     * @returns
     */

  }, {
    key: "remove",
    value: function remove(value) {
      var currNode = this.head;

      if (!currNode) {
        return;
      }

      var previousNode = null; // 当前节点的前置节点

      while (currNode && currNode.value !== value) {
        previousNode = currNode;
        currNode = currNode.next;
      }

      if (!currNode) {
        throw new Error('no match item');
      } else if (!previousNode) {
        // 头结点
        this.head = currNode.next;
      } else {
        previousNode.next = currNode.next;
      }
    }
    /**
     * 清除头元素
     * @returns
     */

  }, {
    key: "removeHead",
    value: function removeHead() {
      if (!this.head) return;
      this.head = this.head.next;
    }
    /**
     * 清除尾元素
     */

  }, {
    key: "removeTail",
    value: function removeTail() {
      if (!this.head) return;
      var currNode = this.head; // 用当前节点来找 尾结点

      var previousNode = null; // 前置节点

      while (currNode.next) {
        // 找尾结点
        previousNode = currNode;
        currNode = currNode.next;
      } // 没有前置节点


      if (currNode === this.head) {
        this.head = null;
      } else {
        previousNode.next = null;
      }
    }
    /**
     * 简单的遍历
     * @param func
     */

  }, {
    key: "traverse",
    value: function traverse(func) {
      if (!this.head) return;
      var currNode = this.head;

      while (currNode) {
        func(currNode.value);
        currNode = currNode.next;
      }
    }
  }]);

  return SingleNodeList;
}(); // 双向链表

var LoopNodeList = /*#__PURE__*/function () {
  function LoopNodeList(value) {
    _classCallCheck(this, LoopNodeList);

    this.head = void 0;
    this.head = value ? new Node(value) : null;
  }

  _createClass(LoopNodeList, [{
    key: "findNode",
    value: function findNode(value) {
      var currNode = this.head;

      while (currNode && currNode.value !== value) {
        currNode = currNode.next; // 重新到头

        if (currNode === this.head) {
          return null;
        }
      }

      if (!currNode) return null;
      return currNode;
    }
  }, {
    key: "insertAfter",
    value: function insertAfter(value, newValue) {
      var currNode = this.findNode(value);

      if (!currNode) {
        throw new Error('not mactch item' + value);
      }

      var newNode = new Node(newValue);
      newNode.next = currNode.next;
      currNode.next = newNode;
    }
    /**
     * 设置尾结点
     * @param value
     * @param loop 是否设置成循环链表
     */

  }, {
    key: "setTail",
    value: function setTail(value) {
      var loop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var node = this.findNode(value);
      node && (node.next = loop ? this.head : null);
    }
    /**
     * 添加元素
     * @param {*} value
     * @param {*} isTail 是否是尾节点
     */

  }, {
    key: "append",
    value: function append(value) {
      var isTail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var newNode = new Node(value);
      var currNode = this.head; // 如果没有头元素

      if (!currNode) {
        this.head = newNode;
        return;
      }

      while (currNode.next && currNode.next !== this.head) {
        currNode = currNode.next;
      }

      currNode.next = newNode;

      if (isTail) {
        newNode.next = this.head;
      }
    }
  }, {
    key: "prepend",
    value: function prepend(value) {
      var newNode = new Node(value);
      newNode.next = this.head;
      this.head = newNode;
    }
  }, {
    key: "empty",
    value: function empty() {
      this.head = null;
    }
  }, {
    key: "remove",
    value: function remove(value) {
      var currNode = this.head;
      var previousNode = null;

      while (currNode && currNode.value !== value) {
        previousNode = currNode;
        currNode = currNode.next; // 重新到头

        if (currNode === this.head) {
          return null;
        }
      }

      if (!currNode) {
        throw new Error('not mactch item ' + value);
      } else if (!previousNode) {
        this.head = currNode.next;
      } else {
        previousNode.next = currNode.next;
      }
    }
  }, {
    key: "size",
    value: function size() {
      var count = 0;
      var currNode = this.head;

      if (currNode) {
        count++;
      } else {
        return 0;
      }

      while (currNode && currNode.next && currNode.next !== this.head) {
        count++;
        currNode = currNode.next;
      }

      return count;
    }
  }, {
    key: "removeHead",
    value: function removeHead() {
      if (!this.head) return;
      this.head = this.head.next;
    }
  }, {
    key: "removeTail",
    value: function removeTail() {// TODO
    }
  }, {
    key: "traverse",
    value: function traverse(cb) {
      var currNode = this.head; // 如果没有头元素

      if (!currNode) {
        return;
      }

      while (currNode && currNode.next !== this.head) {
        cb && cb(currNode.value);
        currNode = currNode.next;
      }

      cb(currNode);
    }
  }]);

  return LoopNodeList;
}();

/**
 * 冒泡排序
 * @param arr
 * @param sortFunc
 * @returns
 */
function bubbleSort(arr) {
  var sortFunc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (a, b) {
    return a - b;
  };

  for (var i = 0; i < arr.length; i++) {
    for (var j = 0; j < arr.length - i - 1; j++) {
      if (sortFunc(arr[j], arr[j + 1]) > 0) {
        var _ref = [arr[j + 1], arr[j]];
        arr[j] = _ref[0];
        arr[j + 1] = _ref[1];
      }
    }
  }

  return arr;
}
/**
 * 选择排序
 * @param arr
 * @param sortFunc
 * @returns
 */

function selectionSort(arr) {
  var sortFunc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (a, b) {
    return a - b;
  };

  for (var i = 0; i < arr.length; i++) {
    var minIndex = i;

    for (var j = i + 1; j < arr.length; j++) {
      if (sortFunc(arr[j], arr[minIndex]) < 0) {
        minIndex = j;
      }
    }

    if (minIndex !== i) {
      var _ref2 = [arr[minIndex], arr[i]];
      arr[i] = _ref2[0];
      arr[minIndex] = _ref2[1];
    }
  }

  return arr;
}
function insertSort(arr) {
  var sortFunc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (a, b) {
    return a - b;
  };

  for (var i = 1; i < arr.length; i++) {
    var j = i - 1;
    var temp = arr[i];

    while (j >= 0 && sortFunc(temp, arr[j]) < 0) {
      arr[j + 1] = arr[j];
      j--;
    }

    arr[j + 1] = temp;
  }

  return arr;
}

export { AniFactory, AniFactoryConfig, DeviceJudge, H5ScrollCtrl, LoopNodeList, Node, PromiseAwait, PromiseAwaitByPropertyValue, Queue, SingleNodeList, Stack, UseEvent, addCSSRule, addClass, addHandler, applyPreOrPost, bubbleSort, classnames, clearCookie, dataURLtoBlobUrl, dateFormat, debounce, debounceDecorator, getCookie, getUrlParam, inputIosAdapte, insertSort, onShowAnimationList, onceFunc, promiseAwaitFunc, randomNum, removeClass, removeHandler, scrollTo, selectionSort, setCookie, setIntervalFunc, setStyles, setTimeoutFunc, setUrlParam, simpleXhr, throttle, throttleDecorator, typeofFunc, ua };
