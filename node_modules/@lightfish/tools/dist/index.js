'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var ua = navigator.userAgent.toLocaleLowerCase();
var DeviceJudge = {
  isWx: function isWx() {
    return !!ua.match(/MicroMessenger/i) && !!(ua.match(/MicroMessenger/i)[0] === 'micromessenger');
  },
  isIos: function isIos() {
    var u = navigator.userAgent;

    if (u.indexOf('Android') > -1 || u.indexOf('Linux') > -1) {
      // 安卓手机
      return false;
    } else if (u.indexOf('iPhone') > -1) {
      // 苹果手机
      return true;
    } else if (u.indexOf('iPad') > -1) {
      // iPad
      return false;
    } else if (u.indexOf('Windows Phone') > -1) {
      // winphone手机
      return false;
    } else {
      return false;
    }
  },
  isPC: function isPC() {
    var userAgentInfo = navigator.userAgent;
    var Agents = ['Android', 'iPhone', 'SymbianOS', 'Windows Phone', 'iPad', 'iPod'];
    var flag = true;

    for (var v = 0; v < Agents.length; v++) {
      if (userAgentInfo.indexOf(Agents[v]) > 0) {
        flag = false;
        break;
      }
    }

    return flag;
  },
  isQQ: function isQQ() {
    return /android|webos|iphone|ipod|balckberry/i.test(ua);
  },
  isMob: function isMob() {
    return /android|webos|iphone|ipod|balckberry/i.test(ua);
  }
};
/**
 * 测试url params
 * @param k
 * @param v
 * @param baseUrl
 * @returns
 */

function setUrlParam(k, v) {
  var baseUrl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : location.href;
  var url = new URL(baseUrl);
  var search = new URLSearchParams(url.search);
  search.set(k, v + '');
  url.search = search.toString();
  return url.href;
}
/**
 * 获取 URLparam
 * @param name
 * @param href
 * @returns
 */

function getUrlParam(name) {
  var href = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : location.href;
  var search = href.slice(href.indexOf('?'));
  var matched = search.slice(1).match(new RegExp('(^|&)' + name + '=([^&]*)(&|$)', 'i'));
  if (!matched) return '';
  return search.length ? matched && matched[2] : '';
}
/**
 * dataUrl(base64) 转为 BlobUrl
 * @param {String} dataurl
 * @returns
 */

function dataURLtoBlobUrl(dataurl) {
  // @ts-expect-error
  var arr = dataurl.split(','),
      mime = arr[0].match(/:(.*?);/)[1],
      bstr = atob(arr[1]),
      n = bstr.length,
      u8arr = new Uint8Array(n);

  while (n--) {
    u8arr[n] = bstr.charCodeAt(n);
  }

  return URL.createObjectURL(new Blob([u8arr], {
    type: mime
  }));
}

var cubic = function cubic(value) {
  return Math.pow(value, 3);
};

var easeInOutCubic = function easeInOutCubic(value) {
  return value < 0.5 ? cubic(value * 2) / 2 : 1 - cubic((1 - value) * 2) / 2;
};
/**
 * 滚动到指定位置
 * @param num
 * @param t
 * @param dom
 * @param attr
 */


function scrollTo() {
  var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;
  var dom = arguments.length > 2 ? arguments[2] : undefined;
  var attr = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'scrollTop';
  var el = dom || document.documentElement;
  var beginTime = Date.now();
  var beginValue = el[attr];

  var rAF = window.requestAnimationFrame || function (func) {
    return setTimeout(func, 16);
  };

  var frameFunc = function frameFunc() {
    var progress = (Date.now() - beginTime) / t;

    if (progress < 1) {
      el[attr] = beginValue - (beginValue - num) * easeInOutCubic(progress);
      rAF(frameFunc);
    } else {
      el[attr] = num;
    }
  };

  rAF(frameFunc);
}
/**
 * 简单封装的 XMLHTTPRequest
 * @param url
 * @param method
 * @param params
 * @param headers
 * @returns
 */

function simpleXhr(url, method, params, headers) {
  return new Promise(function (resolve, reject) {
    var xhr;

    if (window['XMLHttpRequest']) {
      xhr = new XMLHttpRequest();
    } else if (window['ActiveXObject']) {
      xhr = new window['ActiveXObject']('');
    } else {
      alert('no xmlhttprequest');
      return;
    }

    if (xhr) {
      var openUrl = url;
      xhr.timeout = 10000;
      xhr.open(method, openUrl, true);

      if (headers) {
        for (var name in headers) {
          xhr.setRequestHeader(name, headers[name]);
        }
      }

      xhr.onreadystatechange = function () {
        if (xhr.readyState === 4 && xhr.status === 200) {
          resolve(xhr.response);
        }
      };

      xhr.onloadend = function () {
        if (xhr.status !== 200) {
          reject('net error');
        }
      };

      xhr.ontimeout = function () {
        reject('time out');
      };

      xhr.send(params);
    }
  });
}
/**
 *
 * @param name
 * @returns
 */

function getCookie(name) {
  if (document.cookie.length > 0) {
    var start = document.cookie.indexOf("".concat(name, "="));

    if (start !== -1) {
      start = start + name.length + 1;
      var end = document.cookie.indexOf(';', start);

      if (end === -1) {
        end = document.cookie.length;
      }

      return decodeURI(document.cookie.substring(start, end));
    }
  }

  return '';
}
/**
 * 设置cookie值
 *
 * @param {String} name cookie名称
 * @param {String} value cookie值
 * @param {Number} expiredays 过期时间，天数
 */

function setCookie(name, value, expiredays) {
  var exdate = new Date();
  exdate.setDate(exdate.getDate() + expiredays);
  document.cookie = "".concat(name, "=").concat(encodeURI(value)); // @ts-ignore

  document.cookie += expiredays ? ";expires=".concat(exdate.toGMTString()) : "";
}
/**
 * 删除指定cookie值
 * @param {String} name cookie名称
 */

function clearCookie(name) {
  setCookie(name, '', -1);
}
/**
 * 简单的使用 requestAnimationFrame 方法做定时器
 * @param fn
 * @param delay
 * @returns
 */

function setTimeoutFunc(fn) {
  var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;
  var lt = 0;
  var requestId;
  var remainTime = 0;
  var final = {
    start: function start() {
      var now = Date.now();
      requestId = requestAnimationFrame(this.start.bind(this));

      if (now - lt < 100) {
        remainTime += now - lt;

        if (remainTime >= delay) {
          fn();
          cancelAnimationFrame(requestId);
          return;
        }
      }

      lt = now;
    },
    stop: function stop() {
      cancelAnimationFrame(requestId);
    }
  };
  final.start();
  return final;
}
/**
 * 简单的使用 requestAnimationFrame 方法做定时器
 * @param {*} fn
 * @param {*} delay 100
 */

function setIntervalFunc(fn) {
  var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;
  var lt = 0; // lastTime

  var requestId;
  var _events = []; // 每秒需要执行的 方法arr

  typeof fn == 'function' && _events.push(fn); // 每秒都会执行

  var cfg = {
    start: function start() {
      var now = Date.now();
      requestId = requestAnimationFrame(this.start.bind(this));

      if (now - lt >= delay) {
        lt = now;

        _events.map(function (f) {
          return f();
        });
      }
    },

    /**
     *
     * @param {*} fn
     */
    notify: function notify(fn) {
      typeof fn == 'function' && _events.push(fn);
    },
    off: function off(fn) {
      var i = _events.length;

      while (i--) {
        var cb = _events[i];

        if (cb === fn) {
          _events.splice(i, 1);

          break;
        }
      }
    },
    getRequestId: function getRequestId() {
      return requestId;
    },
    stop: function stop() {
      cancelAnimationFrame(requestId);
    }
  };
  cfg.start();
  return cfg;
}
/**
 * 时间格式化
 * @param {*} fmt
 * @param {*} date
 * @returns
 */

function dateFormat(fmt, date) {
  var ret; // ios 的时间 格式 需要转成 /

  if (typeof date === 'string') {
    date = date.replace(/-/g, '/');
  }

  date = new Date(date);
  var opt = {
    "Y+": date.getFullYear().toString(),
    "M+": (date.getMonth() + 1).toString(),
    "d+": date.getDate().toString(),
    "h+": date.getHours().toString(),
    "m+": date.getMinutes().toString(),
    "s+": date.getSeconds().toString() // 秒
    // 有其他格式化字符需求可以继续添加，必须转化成字符串
  }
}
